#!/usr/bin/env groovy

node {
    checkout scm
    def build = load("build.groovy")
    def commonlib = build.commonlib

    // Expose properties for a parameterized build
    properties(
        [
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '',
                    artifactNumToKeepStr: '',
                    daysToKeepStr: '60',
                    numToKeepStr: '')),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    booleanParam(
                        name: 'FORCE_COMPOSE',
                        description: 'Build new compose even if there are no new builds',
                        defaultValue: false,
                    ),
                    commonlib.ocpGroupParam(),
                    string(
                        name: 'OCP_BUILD_FORK',
                        description: 'Fork of ocp-build-data to use',
                        defaultValue: commonlib.defaultOcpBuildFork,
                    ),
                    string(
                        name: 'OVERRIDE_ADVISORY',
                        description: '(Optional)  Integer to use instead of the default rpm advisory number',
                        defaultValue: '',
                    ),
                    commonlib.mockParam(),
                    commonlib.suppressEmailParam(),
                    string(
                        name: 'EMAIL_ALERT',
                        description: '(Optional) email to notify on failure or assistance needed',
                        defaultValue: 'aos-team-art@redhat.com',
                    ),
                ]
            ],
        ]
    )

    commonlib.checkMock()

    currentBuild.description = ""
    try {
        stage("initialize") { build.initialize() }

        build.buildlib.kinit() // for erratatool access
        sshagent(["openshift-bot"]) {
            // To work on private repos, buildlib operations must run
            // with the permissions of openshift-bot
            stage("prepare errata") { build.prepareErratum() }
            stage("add package builds") { build.addBuilds() }
            stage("complete RPMdiff") { build.completeRpmDiff() }
            stage("sign packages") { build.signPackages() }
            stage("create compose") { build.createCompose() }
        }
    } catch (err) {

        if (params.EMAIL_ALERT.trim()) {
            commonlib.email(
                to: params.EMAIL_ALERT,
                from: "aos-team-art@redhat.com",
                subject: "Error building signed compose for OCP ${params.BUILD_VERSION}",
                body:
"""\
Pipeline build "${currentBuild.displayName}" encountered an error:
-----------------
${err}
-----------------

The build description at the time was:
-----------------
${currentBuild.description}
-----------------

View the build artifacts and console output on Jenkins:
    - Jenkins job: ${env.BUILD_URL}
    - Console output: ${env.BUILD_URL}console

"""
            )
        }
        currentBuild.description = "${err}\n-----------------\n${currentBuild.description}"
        currentBuild.result = "FAILURE"
        throw err  // gets us a stack trace FWIW
    }
}
